#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest import TextTestRunner
from unittest.mock import patch
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
main = import_module(REPO_PATH, 'main')



class Test1ExtraMarvin4(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/uppgift/din-egen-chattbot-marvin-utslapp-v2#extra"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                main.main()
                str_data = fake_out.getvalue()
                for val in correct:
                    self.assertIn(val, str_data)
                return str_data

    @tags("e1")
    def test_highest_emission_limited_correct_values(self):
        """
        Testar att anropa menyval 'e1' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna har rätt värden.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e1", "2005 2", "", "q"]

        answer = [
            "China: 6263064000.0",
            "United States of America: 5971571000.0",
        ]

        self.check_print_contain(self._multi_arguments, answer)



    @tags("e1")
    def test_highest_emission_limited_correct_order(self):
        """
        Testar att anropa menyval 'e1' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna är utskrivna i korrekt ordning.
        Använder följande som input:
        {arguments}
        Förväntar att länderna är i följande ordning i utskrift:
        {correct}
        Fick följande utskrift:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e1", "2017 4", "", "q"]


        answer = [
            "China",
            "United States of America",
            "European Union",
            "India",
        ]

        res = self.check_print_contain(self._multi_arguments, [])
        self.assertOrder(
            answer,
            res
        )



    @tags("e2")
    def test_highest_per_capita_limited_correct_values(self):
        """
        Testar att anropa menyval 'e2' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna har rätt värden.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e2", "2017 3", "", "q"]

        answer = [
            "Curaçao: 46.42",
            "Qatar: 35.89",
            "Trinidad and Tobago: 27.27"
        ]

        self.check_print_contain(self._multi_arguments, answer)



    @tags("e2")
    def test_highest_per_capita_limited_correct_order(self):
        """
        Testar att anropa menyval 'e2' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna är utskrivna i korrekt ordning.
        Använder följande som input:
        {arguments}
        Förväntar att länderna är i följande ordning i utskrift:
        {correct}
        Fick följande utskrift:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e2", "2017 4", "", "q"]


        answer = [
            "Curaçao",
            "Qatar",
            "Trinidad and Tobago",
            "Kuwait",
        ]

        res = self.check_print_contain(self._multi_arguments, [])
        self.assertOrder(
            answer,
            res
        )



    @tags("e3")
    def test_highest_per_area_limited_correct_values(self):
        """
        Testar att anropa menyval 'e3' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna har rätt värden.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e3", "1990 2", "", "q"]

        answer = [
            "Singapore: 43829.52",
            "Bahrain: 15664.45"
        ]

        self.check_print_contain(self._multi_arguments, answer)



    @tags("e3")
    def test_highest_per_area_limited_correct_order(self):
        """
        Testar att anropa menyval 'e3' i main.py. Med begränsnings på antalet utskrifter.
        Kollar att länderna är utskrivna i korrekt ordning.
        Använder följande som input:
        {arguments}
        Förväntar att länderna är i följande ordning i utskrift:
        {correct}
        Fick följande utskrift:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["e3", "1990 4", "", "q"]


        answer = [
            "Singapore",
            "Bahrain",
            "Hong Kong",
            "Curaçao"
        ]

        res = self.check_print_contain(self._multi_arguments, [])
        self.assertOrder(
            answer,
            res
        )


if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
