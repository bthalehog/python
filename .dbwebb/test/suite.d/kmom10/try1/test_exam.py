#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from importlib import util
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCaseExam, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
exam = import_module(REPO_PATH, "exam")



class Test1Assignment1(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_for_pass = 20
    points_worth = 20

    @tags("1")
    def test_a_only_an_element(self):
        """
        Testar med sträng där det bara finns ett element.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "Ag"
        self.assertEqual(
            exam.count_elements("Ag"), 
            {'Ag': 1}
        )

    @tags("1")
    def test_b_only_uppers_and_number(self):
        """
        Testar med sträng där benämningarna bara har en stor bokstav och alla efterföljs av minst en siffra.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "C6H12O6"
        self.assertEqual(
            exam.count_elements("C6H12O6"), 
            {'C': 6, 'H': 12, 'O': 6}
        )

        self._argument = "C8H18"
        self.assertEqual(
            exam.count_elements("C8H18"), 
            {'C': 8, 'H': 18}
        )

    @tags("1")
    def test_c_one_of_each_element_no_numbers(self):
        """
        Testar med sträng där varje element benämns med stor bokstav och inga siffror.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "HCO"
        self.assertEqual(
            exam.count_elements("HCO"), 
            {'H': 1, 'C': 1, 'O': 1}
        )

    @tags("1")
    def test_d_mix_upper_and_lower(self):
        """
        Testar med sträng där det finns element med stora och små bokstäver och med och utan siffror.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "CCl2F2"
        self.assertEqual(
            exam.count_elements("CCl2F2"), 
            {'C': 1, 'Cl': 2, 'F': 2}
        )

        self._argument = "NaHCO3"
        self.assertEqual(
            exam.count_elements("NaHCO3"), 
            {'Na': 1, 'H': 1, 'C': 1, 'O': 3}
        )

    @tags("1")
    def test_e_empty_string(self):
        """
        Testar med tom sträng.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = ""
        self.assertEqual(
            exam.count_elements(""), 
            {}
        )



class Test2Assignment2(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10

    @tags("2")
    def test_a_two_teams(self):
        """
        Testar med två lag och två matcher
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._multi_arguments = [("Hammarby Dam", "AIK Dam"), [(1, 0, "1-2"), (1, 0, "2-0")]]
        self.assertEqual(
            exam.fotball_results(("Hammarby Dam", "AIK Dam"), [(1, 0, "1-2"), (1, 0, "2-0")]), 
            {'AIK Dam': {'scores': 1, 'points': 3, 'games': 2}, 'Hammarby Dam': {'scores': -1, 'points': 3, 'games': 2}}
        )



    @tags("2")
    def test_b_four_teams(self):
        """
        Testar med fyra lag och flera matcher
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._multi_arguments = [("Hammarby Dam", "Eskilstuna", "Kristianstad", "AIK Dam"), [(2,0,"1-2"),(1,0,"2-0"),(2,3,"1-1"),(3,1,"0-1"),(3,2,"1-3")]]
        self.assertEqual(
            exam.fotball_results(("Hammarby Dam", "Eskilstuna", "Kristianstad", "AIK Dam"), [(2,0,"1-2"),(1,0,"2-0"),(2,3,"1-1"),(3,1,"0-1"),(3,2,"1-3")]), 
            {'Kristianstad': {'scores': 1, 'points': 4, 'games': 3}, 'Hammarby Dam': {'scores': -1, 'points': 3, 'games': 2}, 'Eskilstuna': {'scores': 3, 'points': 6, 'games': 2}, 'AIK Dam': {'scores': -3, 'points': 1, 'games': 3}}
        )



class Test3Assignment3(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    points_worth = 10

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)



    @tags("3")
    def test_a_subset_zero(self):
        """
        Testar att funktionen skriver ut korrekt data.
        Förväntar att följande skrivs ut:
        {correct}
        Fick följande:
        {student} 
        """
        self.norepr = True
        correct = [
            '[1, 2, 3] False',
            '[1, 2, 3, 0] True',
            '[-5, -3, -1, 2, 4, 6] False',
            '[-97364, -71561, -69336, 19675, 71561, 97863] True',
            '[-53974, -39140, -36561, -23935, -15680, 0] True',
            '[1, 2, 3, 23] False',
            '[-1, 1] True',
            '[-1, 10, 4, 24] False'
        ]
        with patch("sys.stdout", new=StringIO()) as fake_out:
            exam.subset_zero()
            str_data = fake_out.getvalue()
            for v in correct:
                self.assertIn(v, str_data)



class Test4Assignment4(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10



    @tags("4")
    def test_a_list_jolly_each_lower(self):
        """
        Testar med list som är jolly där minskar med 1 hela tiden.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = [1, 4, 2, 3]
        self.assertEqual(
            exam.jolly([1, 4, 2, 3]),
            '3 2 1 JOLLY'
        )

        self._argument = [23, 19, 22, 24, 25]
        self.assertEqual(
            exam.jolly([23, 19, 22, 24, 25]),
            '4 3 2 1 JOLLY'
        )

    @tags("4")
    def test_b_list_jolly_with_equal(self):
        """
        Testar med list som är jolly där skillnader är -1 eller lika.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = [104, 52, 1, -50, 0]
        self.assertEqual(
            exam.jolly([104, 52, 1, -50, 0]),
            '52 51 51 50 JOLLY'
        )

    @tags("4")
    def test_c_lists_not_jolly(self):
        """
        Testar med lista som inte är Jolly
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = [8, 1, 6, -1, 8, 9, 5, 2, 7]
        self.assertEqual(
            exam.jolly([8, 1, 6, -1, 8, 9, 5, 2, 7]),
            '7 5 7 9 1 4 3 5 NOT JOLLY'
        )

        self._argument = [5, 1, 4, 2, -1, 6]
        self.assertEqual(
            exam.jolly([5, 1, 4, 2, -1, 6]),
            '4 3 2 3 7 NOT JOLLY'
        )

        self._argument = [4, 19, 22, 24, 21]
        self.assertEqual(
            exam.jolly([4, 19, 22, 24, 21]),
            '15 3 2 3 NOT JOLLY'
        )



class Test5Assignment5(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10

    @tags("5")
    def test_a_positiv_values_input(self):
        """
        Testar med positiva värden.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "100,20"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                (15.6, 91.8)
            )

        self._argument = "10000,5"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                (390.0, 2295.0)
            )

    @tags("5")
    def test_b_year_zero_input(self):
        """
        Testar med år 0.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "100,0"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                (0.0, 0.0)
            )

    @tags("5")
    def test_c_money_zero_input(self):
        """
        Testar med pengar 0.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """

        self._argument = "0,5"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                (0.0, 0.0)
            )


    @tags("5")
    def test_d_year_negativ_input(self):
        """
        Testar med negativt år.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "50,-2"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                ()
            )

    @tags("5")
    def test_e_money_negativ_input(self):
        """
        Testar med negativa pengar.
        Använder följande som input:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        self._argument = "-203,7"
        with patch("builtins.input", side_effect=[self._argument]):
            self.assertEqual(
                exam.compare_banks(),
                (-11.08, -65.22)
            )

    @tags("5")
    def test_f_only_money_savingscentral_function(self):
        """
        Testar anropa money_growth i savingscentral.py med bara ett argument för pengar.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        savingscentral = import_module(REPO_PATH, "savingscentral")
        self._argument = 203
        self.assertEqual(
            savingscentral.money_growth(203),
            15.83
        )

    @tags("5")
    def test_g_money_year_savingscentral_function(self):
        """
        Testar anropa money_growth i savingscentral.py med pengar och år.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        savingscentral = import_module(REPO_PATH, "savingscentral")
        self._multi_arguments = [333, 3]
        self.assertEqual(
            savingscentral.money_growth(333, 3),
            7.79
        )

    @tags("5")
    def test_h_year_negativ_savingscentral_function_raise_error(self):
        """
        Testar anropa money_growth i savingscentral.py med pengar och år där år är negativt.
        Använder följande som argument:
        {arguments}
        Förväntar att följande fel lyfts:
        {correct}
        Fick följande:
        {student} 
        """
        savingscentral = import_module(REPO_PATH, "savingscentral")
        self._multi_arguments = [605, -88]
        with self.assertRaises(ValueError):
            savingscentral.money_growth(605, -88),


    @tags("5")
    def test_i_only_money_stockbank_function(self):
        """
        Testar anropa money_growth i stockbank.py med bara ett argument för pengar.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        stockbank = import_module(REPO_PATH, "stockbank")
        self._argument = 47
        self.assertEqual(
            stockbank.money_growth(47),
            21.57
        )

    @tags("5")
    def test_j_money_year_stockbank_function(self):
        """
        Testar anropa money_growth i stockbank.py med pengar och år.
        Använder följande som argument:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        stockbank = import_module(REPO_PATH, "stockbank")
        self._multi_arguments = [605, 88]
        self.assertEqual(
            stockbank.money_growth(605, 88),
            2443.72
        )

    @tags("5")
    def test_k_year_negativ_stockbank_function_raise_error(self):
        """
        Testar anropa money_growth i stockbank.py med pengar och år där år är negativt.
        Förväntar att följande fel lyfts:
        {arguments}
        Förväntar att följande returneras:
        {correct}
        Fick följande:
        {student} 
        """
        stockbank = import_module(REPO_PATH, "stockbank")
        self._multi_arguments = [605, -88]
        with self.assertRaises(ValueError):
            stockbank.money_growth(605, -88),

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
