#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from importlib import util
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCaseExam, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
exam = import_module(REPO_PATH, "exam")



class Test1Assignment1(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_for_pass = 20
    points_worth = 20

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)

    @tags("1")
    def test_a_find_words(self):
        """
        Testar att "find_words" returnerar rätt dictionary.
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        words = exam.find_words()
        self.assertEqual(
            words,
            {'Twas': 2, 'Jabberwock': 3, 'he': 2, 'toves': 2, 'catch': 1, 'Beware': 0}
        )



class Test2Assignment2(ExamTestCaseExam):
    """
    Each assignment has 2 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10
    @tags("2")
    def test_a_same_word_true(self):
        """
        Testar "same_word" returnerar True för samma ord.
        Använde följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._multi_arguments = ["nicole", "icolen"]
        self.assertTrue(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["nicole", "lenico"]
        self.assertTrue(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["aabaaaaabaab", "aabaabaabaaa"]
        self.assertTrue(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["x", "x"]
        self.assertTrue(exam.same_word(*self._multi_arguments))

    @tags("2")
    def test_b_same_word_false(self):
        """
        Testar "same_word" returnerar False för icke samma ord.
        Använde följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._multi_arguments = ["nicole", "coneli"]
        self.assertFalse(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["abc", "cba"]
        self.assertFalse(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["xxyyy", "xxxyy"]
        self.assertFalse(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["xyxxz", "xxyxz"]
        self.assertFalse(exam.same_word(*self._multi_arguments))
        self._multi_arguments = ["x", "xx"]
        self.assertFalse(exam.same_word(*self._multi_arguments))



class Test3Assignment3(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10

    @tags("3")
    def test_a_find_missing_numbers_one(self):
        """
        Testar att "find_missing_numbers" returnerar rätt siffror när en siffra saknas.
        Använder följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = [2, 4, 6, 3, 8, 7]
        self.assertEqual(exam.find_missing_numbers([2, 4, 6, 3, 8, 7]), [5])
        self._argument = [10, 7, 9, 8, 12]
        self.assertEqual(exam.find_missing_numbers([10, 7, 9, 8, 12]), [11])

    @tags("3")
    def test_b_find_missing_numbers_multiple(self):
        """
        Testar att "find_missing_numbers" returnerar rätt siffror när fler än en siffra saknas.
        Använder följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = [42, 46, 47, 48, 43]
        self.assertEqual(exam.find_missing_numbers([42, 46, 47, 48, 43]), [44, 45])
        self._argument = [2, 4, 3, 8, 7]
        self.assertEqual(exam.find_missing_numbers([2, 4, 3, 8, 7]), [5, 6])
        self._argument = [2, 4, 8, 7]
        self.assertEqual(exam.find_missing_numbers([2, 4, 8, 7]), [3, 5, 6])


    @tags("3")
    def test_c_find_missing_numbers_negative(self):
        """
        Testar att "find_missing_numbers" returnerar rätt siffror när det ingår negativa siffror.
        Använder följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = [-1, 2, 4, 3, 8, 7]
        self.assertEqual(exam.find_missing_numbers([-1, 2, 4, 3, 8, 7]), [0, 1, 5, 6])
        self._argument = [-2, -4, -3, -8, -7]
        self.assertEqual(exam.find_missing_numbers([-2, -4, -3, -8, -7]), [-6, -5])

class Test4Assignment4(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10

    @tags("4")
    def test_a_missing_letters_one(self):
        """
        Testar att "missing_letters" returnerar rätt när en bokstav saknas.
        Använde följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = ["a", "b", "d"]
        self.assertEqual(exam.missing_letters(["a", "b", "d"]), ["c"])

    @tags("4")
    def test_b_missing_letters_multiple(self):
        """
        Testar att "missing_letters" returnerar rätt där flera bokstäver saknas på olika ställen.
        Använde följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = ["p", "r", "s", "t", "v"]
        self.assertEqual(exam.missing_letters(["p", "r", "s", "t", "v"]), ["q", "u"])


    @tags("4")
    def test_c_missing_letters_multiple_sequence(self):
        """
        Testar att "missing_letters" returnerar rätt där flera bokstäver saknas efter varandra.
        Använde följande som argument
        {arguments}
        Förväntar sig att följande returneras:
        {correct}
        Fick istället:
        {student}
        """
        self._argument = ["a", "z"]
        self.assertEqual(exam.missing_letters(self._argument), \
            ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', \
             'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y'])




class Test5Assignment5(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.

    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """
    points_worth = 10
    @tags("5")
    def test_a_text_repetition(self):
        """
        Testar att "text_repetition" skriver ut rätt värden.
        Förväntar sig att följande skrivs ut:
        {correct}
        Fick istället:
        {student}
        """
        with patch('sys.stdout', new=StringIO()) as fake_out:
            exam.text_repetition()
            str_data = fake_out.getvalue().strip("\n")
            list_data = str_data.split("\n")
            self.assertEqual(list_data, [
                "Apa på en gata, Apa på en gata, Apa på en gata.",
                "Jag har en fin dag, Jag har en fin dag, Jag har en fin dag, Jag har en fin dag.",
                "Solen skiner idag, Solen skiner idag, Solen skiner idag.",
                "Vem är du, Vem är du, Vem är du, Vem är du, Vem är du.",
            ])

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
